#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# Commit message hook para validar formato de mensajes
echo "üìù Validando mensaje de commit..."

# Obtener el archivo del mensaje de commit
commit_msg_file="$1"

# Leer el mensaje de commit
commit_msg=$(cat "$commit_msg_file")

# Funci√≥n para mostrar errores
show_error() {
  echo "‚ùå $1"
}

# Funci√≥n para mostrar √©xito
show_success() {
  echo "‚úÖ $1"
}

# Funci√≥n para mostrar ayuda
show_help() {
  echo "\nüìã Formato de commit convencional:"
  echo "   <tipo>[scope opcional]: <descripci√≥n>"
  echo "\n   [cuerpo opcional]"
  echo "\n   [footer opcional]"
  echo "\nüè∑Ô∏è Tipos v√°lidos:"
  echo "   ‚Ä¢ feat:     Nueva funcionalidad"
  echo "   ‚Ä¢ fix:      Correcci√≥n de bug"
  echo "   ‚Ä¢ docs:     Cambios en documentaci√≥n"
  echo "   ‚Ä¢ style:    Cambios de formato (espacios, comas, etc.)"
  echo "   ‚Ä¢ refactor: Refactorizaci√≥n de c√≥digo"
  echo "   ‚Ä¢ test:     Agregar o modificar tests"
  echo "   ‚Ä¢ chore:    Tareas de mantenimiento"
  echo "   ‚Ä¢ perf:     Mejoras de rendimiento"
  echo "   ‚Ä¢ ci:       Cambios en CI/CD"
  echo "   ‚Ä¢ build:    Cambios en build system"
  echo "   ‚Ä¢ revert:   Revertir commits anteriores"
  echo "\nüìù Ejemplos v√°lidos:"
  echo "   feat(auth): agregar login con Google"
  echo "   fix(api): corregir validaci√≥n de email"
  echo "   docs(readme): actualizar instrucciones de instalaci√≥n"
  echo "   style: formatear c√≥digo con prettier"
  echo "   refactor(utils): simplificar funci√≥n de validaci√≥n"
  echo "   test(auth): agregar tests para login"
  echo "   chore(deps): actualizar dependencias"
  echo "\nüîç Reglas:"
  echo "   ‚Ä¢ Usar min√∫sculas"
  echo "   ‚Ä¢ No terminar con punto"
  echo "   ‚Ä¢ M√°ximo 72 caracteres en la primera l√≠nea"
  echo "   ‚Ä¢ Usar modo imperativo (\"agregar\" no \"agregado\")"
}

# Verificar si el mensaje est√° vac√≠o
if [ -z "$commit_msg" ] || [ "$commit_msg" = "" ]; then
  show_error "El mensaje de commit no puede estar vac√≠o"
  show_help
  exit 1
fi

# Obtener la primera l√≠nea del mensaje
first_line=$(echo "$commit_msg" | head -n1)

# Verificar longitud de la primera l√≠nea
if [ ${#first_line} -gt 72 ]; then
  show_error "La primera l√≠nea del mensaje es muy larga (${#first_line} caracteres, m√°ximo 72)"
  echo "\nüìè Mensaje actual: $first_line"
  echo "\nüí° Intenta ser m√°s conciso o usa el cuerpo del mensaje para detalles adicionales"
  show_help
  exit 1
fi

# Verificar que no termine con punto
if echo "$first_line" | grep -q '\.$'; then
  show_error "El mensaje de commit no debe terminar con punto"
  echo "\nüìè Mensaje actual: $first_line"
  show_help
  exit 1
fi

# Verificar formato convencional
if echo "$first_line" | grep -qE '^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?: .+'; then
  # Verificar que est√© en min√∫sculas (excepto acr√≥nimos conocidos)
  if echo "$first_line" | grep -qE '^[a-z]+(\([a-zA-Z0-9-]+\))?: [a-z]'; then
    show_success "Formato de commit v√°lido"
    
    # Verificaciones adicionales opcionales
    
    # Verificar palabras prohibidas
    prohibited_words="WIP|TODO|FIXME|HACK|XXX"
    if echo "$commit_msg" | grep -qiE "($prohibited_words)"; then
      echo "‚ö†Ô∏è El mensaje contiene palabras que sugieren trabajo incompleto"
      echo "üí° Considera completar el trabajo antes del commit"
    fi
    
    # Verificar que no sea muy gen√©rico
    generic_messages="update|change|modify|improve|enhance|optimize"
    if echo "$first_line" | grep -qiE "^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?: ($generic_messages)$"; then
      echo "‚ö†Ô∏è El mensaje es muy gen√©rico"
      echo "üí° Intenta ser m√°s espec√≠fico sobre qu√© cambios realizaste"
    fi
    
    # Verificar referencias a issues (opcional)
    if echo "$commit_msg" | grep -qE '#[0-9]+'; then
      show_success "Referencia a issue detectada"
    fi
    
    # Verificar breaking changes
    if echo "$commit_msg" | grep -qiE 'BREAKING CHANGE|!:'; then
      echo "üö® Breaking change detectado"
      echo "üí° Aseg√∫rate de documentar los cambios incompatibles"
    fi
    
    exit 0
  else
    show_error "El mensaje debe comenzar con min√∫scula"
    echo "\nüìè Mensaje actual: $first_line"
    show_help
    exit 1
  fi
else
  show_error "El mensaje no sigue el formato convencional"
  echo "\nüìè Mensaje actual: $first_line"
  
  # Intentar sugerir correcciones
  echo "\nüîß Posibles correcciones:"
  
  # Si parece que falta el tipo
  if echo "$first_line" | grep -qE '^[A-Z]'; then
    echo "   ‚Ä¢ Agregar tipo: feat: $(echo "$first_line" | tr '[:upper:]' '[:lower:]')"
  fi
  
  # Si parece que tiene el formato pero tipo incorrecto
  if echo "$first_line" | grep -qE '^[a-z]+:'; then
    current_type=$(echo "$first_line" | cut -d':' -f1)
    echo "   ‚Ä¢ Tipo '$current_type' no es v√°lido"
    echo "   ‚Ä¢ Tipos v√°lidos: feat, fix, docs, style, refactor, test, chore, perf, ci, build, revert"
  fi
  
  # Si no tiene dos puntos
  if ! echo "$first_line" | grep -q ':'; then
    echo "   ‚Ä¢ Agregar dos puntos despu√©s del tipo: feat: $first_line"
  fi
  
  show_help
  exit 1
fi

# Verificaciones adicionales para el cuerpo del mensaje
if [ $(echo "$commit_msg" | wc -l) -gt 1 ]; then
  # Verificar l√≠nea en blanco despu√©s del t√≠tulo
  second_line=$(echo "$commit_msg" | sed -n '2p')
  if [ -n "$second_line" ]; then
    echo "‚ö†Ô∏è Debe haber una l√≠nea en blanco entre el t√≠tulo y el cuerpo"
    echo "\nüí° Formato correcto:"
    echo "   feat(scope): t√≠tulo"
    echo "   "
    echo "   Cuerpo del mensaje explicando los cambios..."
  fi
  
  # Verificar longitud de l√≠neas del cuerpo
  body_lines=$(echo "$commit_msg" | tail -n +3)
  while IFS= read -r line; do
    if [ ${#line} -gt 72 ]; then
      echo "‚ö†Ô∏è L√≠nea del cuerpo muy larga (${#line} caracteres): $line"
      echo "üí° Intenta mantener las l√≠neas del cuerpo bajo 72 caracteres"
    fi
  done <<< "$body_lines"
fi

# Verificar encoding
if ! echo "$commit_msg" | iconv -f utf-8 -t utf-8 > /dev/null 2>&1; then
  show_error "El mensaje contiene caracteres no v√°lidos (debe ser UTF-8)"
  exit 1
fi

# Verificar caracteres especiales problem√°ticos
if echo "$commit_msg" | grep -q '[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]'; then
  show_error "El mensaje contiene caracteres de control no v√°lidos"
  exit 1
fi

show_success "Mensaje de commit v√°lido y bien formateado"
exit 0